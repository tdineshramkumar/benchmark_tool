""" This script is used to save plots of a given monitor's system log file """
import matplotlib.pyplot as plt
import argparse
import json
import os

parser = argparse.ArgumentParser()
parser.add_argument('--scenario', '-S', help='specify the benchmark scenario', required=True)
args = parser.parse_args()

server_log_file = args.scenario + '-monitor-server.log'
client_log_file = args.scenario + '-monitor-client.log'
print("expected server log file: ", server_log_file)
print("expected client log file: ", client_log_file)
""" Assert that the log files exists """
assert os.path.exists(server_log_file)
assert os.path.exists(client_log_file)

print("log files for client and server found for given scenario")


def de_accumulate(values):
    """ De-accumulates a list """
    new_values = [0]
    for i in range(1, len(values)):
        new_values.append(values[i] - values[i - 1])
    return new_values


def parse_log_file(log_file):
    """ This function reads the log_file generated by monitor process, and parses them """
    with open(log_file) as file:
        """ Read the top two lines: the system info, and process info and ignore them """
        file.readline()
        file.readline()

        """ The stats expected from the log file """
        num_threads, num_fds = [], []
        memory_rss, memory_vms = [], []
        cpu_percent, system_times, user_times = [], [], []
        timestamps = []

        """ Read the json stats from each of the line """
        for line in file:
            stat = json.loads(line)
            """ Must be unpacked to dictionary, with specified fields """
            assert isinstance(stat, dict)
            timestamps.append(stat['time'])
            cpu_percent.append(stat['cpu_percent'])
            system_times.append(stat['cpu_times']['system'])
            user_times.append(stat['cpu_times']['user'])
            """memory is measured in mega bytes"""
            mB = 1024 * 1024
            memory_rss.append(stat['memory']['rss']/ mB)
            memory_vms.append(stat['memory']['vms']/ mB)
            # Other stats
            num_threads.append(stat['num_threads'])
            num_fds.append(stat['num_fds'])

        """ Subtract from initial start time, to get only relative time"""
        timestamps = [t - timestamps[0] for t in timestamps]

        """ Note: currently user times and system times are in accumulated form, we need to de-accumulate it """
        system_times = de_accumulate(system_times)
        user_times = de_accumulate(user_times)

        return {
            'time': timestamps,
            'cpu': {'percent': cpu_percent, 'user': user_times, 'system': system_times},
            'memory': {'rss': memory_rss, 'vms': memory_vms},
            'num_threads': num_threads,
            'num_fds': num_fds,
        }


def plot_metrics(axes_, metrics_, prefix=""):
    """ Pass a list of axes on which to plot the given metrics with respect to time,
        It plots cpu percentage on first, cpu system times on second, cpu user times on third,
        memory rss on fourth, memory vms on fifth, num threads on sixth, and num fds on seventh
    """
    ax1, ax2, ax3, ax4, ax5, ax6, ax7 = axes_
    ax1.plot(metrics_['time'], metrics_['cpu']['percent'])
    ax1.set_title(prefix + 'CPU Usage')
    ax1.set_xlabel('time (s)')
    ax1.set_ylabel('%CPU')

    ax2.plot(metrics_['time'], metrics_['cpu']['system'])
    ax2.set_title(prefix + 'System Time')
    ax2.set_xlabel('time (s)')
    ax2.set_ylabel('time (s)')

    ax3.plot(metrics_['time'], metrics_['cpu']['user'])
    ax3.set_title(prefix + 'User Time')
    ax3.set_xlabel('time (s)')
    ax3.set_ylabel('time (s)')

    ax4.plot(metrics_['time'], metrics_['memory']['rss'])
    ax4.set_title(prefix + 'Memory RSS/ RES')
    ax4.set_xlabel('time (s)')
    ax4.set_ylabel('Memory Size (MB)')

    ax5.plot(metrics_['time'], metrics_['memory']['vms'])
    ax5.set_title(prefix + 'Memory VMS/ VIRT')
    ax5.set_xlabel('time (s)')
    ax5.set_ylabel('Memory Size (MB)')

    ax6.plot(metrics_['time'], metrics_['num_threads'])
    ax6.set_title(prefix + 'Number of threads')
    ax6.set_xlabel('time (s)')
    ax6.set_ylabel('#threads')

    ax7.plot(metrics_['time'], metrics_['num_fds'])
    ax7.set_title(prefix + 'Number of file descriptors')
    ax7.set_xlabel('time (s)')
    ax7.set_ylabel('#fd')


""" Get the client and server metrics """
print("parsing server logs..")
server_metrics = parse_log_file(server_log_file)

print("parsing client logs..")
client_metrics = parse_log_file(client_log_file)

print("constructing plot for scenario ..")
""" Construct a figure with appropriate dimensions to plot metrics on"""
plt.figure(figsize=(80, 40))

""" Obtain the axes to plot the given server """
server_axes = [
    plt.subplot2grid((4, 8), (0, 0), rowspan=2, colspan=2),
    plt.subplot2grid((4, 8), (0, 2), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (1, 2), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (2, 0), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (3, 0), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (2, 2), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (3, 2), rowspan=1, colspan=2),
]
client_axes = [
    plt.subplot2grid((4, 8), (0, 4), rowspan=2, colspan=2),
    plt.subplot2grid((4, 8), (0, 6), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (1, 6), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (2, 4), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (3, 4), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (2, 6), rowspan=1, colspan=2),
    plt.subplot2grid((4, 8), (3, 6), rowspan=1, colspan=2),
]

print("plotting server metrics ..")
plot_metrics(server_axes, server_metrics, 'server ')
print("plotting client metrics ..")
plot_metrics(client_axes, client_metrics, 'client ')

""" Save as png image """
image_file = args.scenario + '.png'
print("saving to image", image_file)
plt.suptitle("Scenario: " + args.scenario)
plt.savefig(image_file, dpi=120)
plt.clf()
